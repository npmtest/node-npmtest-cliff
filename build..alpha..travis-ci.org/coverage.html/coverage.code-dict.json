{"/home/travis/build/npmtest/node-npmtest-cliff/test.js":"/* istanbul instrument in package npmtest_cliff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cliff/lib.npmtest_cliff.js":"/* istanbul instrument in package npmtest_cliff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cliff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cliff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cliff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cliff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cliff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cliff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cliff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cliff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cliff.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cliff.__dirname + '/lib.npmtest_cliff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cliff/node_modules/cliff/lib/cliff.js":"/*\n * cliff.js: CLI output formatting tools: \"Your CLI Formatting Friend\".\n *\n * (C) 2010, Charlie Robbins & the Contributors\n *\n */\n\nvar colors = require('colors'),\n    eyes = require('eyes'),\n    winston = require('winston');\n\nvar cliff = exports,\n    logger;\n\ncliff.__defineGetter__('logger', function () {\n  delete cliff.logger;\n  return cliff.logger = logger;\n});\n\ncliff.__defineSetter__('logger', function (val) {\n  logger = val;\n\n  //\n  // Setup winston to use the `cli` formats\n  //\n  if (logger.cli) {\n    logger.cli();\n  }\n});\n\n//\n// Set the default logger for cliff.\n//\ncliff.logger = new winston.Logger({\n  transports: [new winston.transports.Console()]\n});\n\n//\n// Expose a default `eyes` inspector.\n//\ncliff.inspector = eyes.inspector;\ncliff.inspect   = eyes.inspector({ stream: null,\n  styles: {               // Styles applied to stdout\n    all:     null,        // Overall style applied to everything\n    label:   'underline', // Inspection labels, like 'array' in `array: [1, 2, 3]`\n    other:   'inverted',  // Objects which don't have a literal representation, such as functions\n    key:     'grey',      // The keys in object literals, like 'a' in `{a: 1}`\n    special: 'grey',      // null, undefined...\n    number:  'blue',      // 0, 1, 2...\n    bool:    'magenta',   // true false\n    regexp:  'green'      // /\\d+/\n  }\n});\n\n//\n// ### function extractFrom (obj, properties)\n// #### @obj {Object} Object to extract properties from.\n// #### @properties {Array} List of properties to output.\n// Creates an array representing the values for `properties` in `obj`.\n//\ncliff.extractFrom = function (obj, properties) {\n  return properties.map(function (p) {\n    return obj[p];\n  });\n};\n\n//\n// ### function columnMajor (rows)\n// #### @rows {ArrayxArray} Row-major Matrix to transpose\n// Transposes the row-major Matrix, represented as an array of rows,\n// into column major form (i.e. an array of columns).\n//\ncliff.columnMajor = function (rows) {\n  var columns = [];\n\n  rows.forEach(function (row) {\n    for (var i = 0; i < row.length; i += 1) {\n      if (!columns[i]) {\n        columns[i] = [];\n      }\n\n      columns[i].push(row[i]);\n    }\n  });\n\n  return columns;\n};\n\n//\n// ### arrayLengths (arrs)\n// #### @arrs {ArrayxArray} Arrays to calculate lengths for\n// Creates an array with values each representing the length\n// of an array in the set provided.\n//\ncliff.arrayLengths = function (arrs) {\n  var i, lengths = [];\n  for (i = 0; i < arrs.length; i += 1) {\n    lengths.push(longestElement(arrs[i].map(cliff.stringifyLiteral)));\n  }\n  return lengths;\n};\n\n//\n// ### function stringifyRows (rows, colors)\n// #### @rows {ArrayxArray} Matrix of properties to output in row major form\n// #### @colors {Array} Set of colors to use for the headers\n// Outputs the specified `rows` as fixed-width columns, adding\n// colorized headers if `colors` are supplied.\n//\ncliff.stringifyRows = function (rows, colors, options) {\n  var lengths, columns, output = [], headers;\n\n  options = options || {};\n  options.columnSpacing = options.columnSpacing || 2;\n\n  columns = cliff.columnMajor(rows);\n  lengths = cliff.arrayLengths(columns);\n\n  function stringifyRow(row, colorize) {\n    var rowtext = '', padding, item, i, length;\n    for (i = 0; i < row.length; i += 1) {\n      item = cliff.stringifyLiteral(row[i]);\n\n      if(colorize) {\n        item = item[colors[i]] || item[colors[colors.length -1]] || item;\n      }\n\n      length = realLength(item);\n      padding = length < lengths[i] ? lengths[i] - length + options.columnSpacing  : options.columnSpacing ;\n      rowtext += item + new Array(padding).join(' ');\n    }\n\n    output.push(rowtext);\n  }\n\n  // If we were passed colors, then assume the first row\n  // is the headers for the rows\n  if (colors) {\n    headers = rows.splice(0, 1)[0];\n    stringifyRow(headers, true);\n  }\n\n  rows.forEach(function (row) {\n    stringifyRow(row, false);\n  });\n\n  return output.join('\\n');\n};\n\n//\n// ### function rowifyObjects (objs, properties, colors)\n// #### @objs {Array} List of objects to create output for\n// #### @properties {Array} List of properties to output\n// #### @colors {Array} Set of colors to use for the headers\n// Extracts the lists of `properties` from the specified `objs`\n// and formats them according to `cliff.stringifyRows`.\n//\ncliff.stringifyObjectRows = cliff.rowifyObjects = function (objs, properties, colors, options) {\n  var rows = [properties].concat(objs.map(function (obj) {\n    return cliff.extractFrom(obj, properties);\n  }));\n\n  return cliff.stringifyRows(rows, colors, options);\n};\n\n//\n// ### function putRows (level, rows, colors)\n// #### @level {String} Log-level to use\n// #### @rows {Array} Array of rows to log at the specified level\n// #### @colors {Array} Set of colors to use for the specified row(s) headers.\n// Logs the stringified table result from `rows` at the appropriate `level` using\n// `cliff.logger`. If `colors` are supplied then use those when stringifying `rows`.\n//\ncliff.putRows = function (level, rows, colors) {\n  cliff.stringifyRows(rows, colors).split('\\n').forEach(function (str) {\n    logger.log(level, str);\n  });\n};\n\n//\n// ### function putObjectRows (level, rows, colors)\n// #### @level {String} Log-level to use\n// #### @objs {Array} List of objects to create output for\n// #### @properties {Array} List of properties to output\n// #### @colors {Array} Set of colors to use for the headers\n// Logs the stringified table result from `objs` at the appropriate `level` using\n// `cliff.logger`. If `colors` are supplied then use those when stringifying `objs`.\n//\ncliff.putObjectRows = function (level, objs, properties, colors) {\n  cliff.rowifyObjects(objs, properties, colors).split('\\n').forEach(function (str) {\n    logger.log(level, str);\n  });\n};\n\n//\n// ### function putObject (obj, [rewriters, padding])\n// #### @obj {Object} Object to log to the command line\n// #### @rewriters {Object} **Optional** Set of methods to rewrite certain object keys\n// #### @padding {Number} **Optional** Length of padding to put around the output.\n// Inspects the object `obj` on the command line rewriting any properties which match\n// keys in `rewriters` if any. Adds additional `padding` if supplied.\n//\ncliff.putObject = function (/*obj, [rewriters, padding] */) {\n  var args = Array.prototype.slice.call(arguments),\n      obj = args.shift(),\n      padding = typeof args[args.length - 1] === 'number' && args.pop(),\n      rewriters = typeof args[args.length -1] === 'object' && args.pop(),\n      keys = Object.keys(obj).sort(),\n      sorted = {},\n      matchers = {},\n      inspected;\n\n  padding = padding || 0;\n  rewriters = rewriters || {};\n\n  function pad () {\n    for (var i = 0; i < padding / 2; i++) {\n      logger.data('');\n    }\n  }\n\n  keys.forEach(function (key) {\n    sorted[key] = obj[key];\n  });\n\n  inspected = cliff.inspect(sorted);\n\n  Object.keys(rewriters).forEach(function (key) {\n    matchers[key] = new RegExp(key);\n  });\n\n  pad();\n  inspected.split('\\n').forEach(function (line) {\n    Object.keys(rewriters).forEach(function (key) {\n      if (matchers[key].test(line)) {\n        line = rewriters[key](line);\n      }\n    });\n    logger.data(line);\n  });\n  pad();\n};\n\ncliff.stringifyLiteral = function stringifyLiteral (literal) {\n  switch (cliff.typeOf(literal)) {\n    case 'number'   : return literal + '';\n    case 'null'     : return 'null';\n    case 'undefined': return 'undefined';\n    case 'boolean'  : return literal + '';\n    default         : return literal;\n  }\n};\n\ncliff.typeOf = function typeOf(value) {\n  var s = typeof(value),\n      types = [Object, Array, String, RegExp, Number, Function, Boolean, Date];\n\n  if (s === 'object' || s === 'function') {\n    if (value) {\n      types.forEach(function (t) {\n        if (value instanceof t) {\n          s = t.name.toLowerCase();\n        }\n      });\n    } else {\n      s = 'null';\n    }\n  }\n\n  return s;\n};\n\nfunction realLength(str) {\n  return (\"\" + str).replace(/\\u001b\\[\\d+m/g,'').length;\n}\n\nfunction longestElement(a) {\n  var l = 0;\n  for (var i = 0; i < a.length; i++) {\n    var new_l = realLength(a[i]);\n    if (l < new_l) {\n      l = new_l;\n    }\n  }\n\n  return l;\n}\n"}